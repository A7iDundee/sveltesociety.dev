<script>
  import CategoryTree from "@/components/recipes/CategoryTree.svelte";

  import { getContext } from "svelte";
  const categories = getContext("categories");
</script>

<style>
  .content-wrap {
    align-items: center;
    width: var(--width-content);
    margin: 0 auto;
  }
  .navigation-block {
    background: #f3f6f9;
    padding: 1rem;
  }

  .categories-wrap {
    display: flex;
    justify-content: space-evenly;
    flex-wrap: wrap;
    padding-top: 1rem;
  }
  .category-style {
    width: 50%;
  }
  @media screen and (max-width: 800px) {
    .category-style {
      width: 100%;
    }
    .content-wrap {
      width: inherit;
    }
  }
  .signup-block {
    background: #ecf6ff;
    padding: 1rem;
  }
  button {
    display: block;
    margin: 0 auto;
  }
</style>

<div class="content-wrap">
  <div class="my-1">
    <h1>Cookbook</h1>
    <p class="intro">
      This cookbook serves shows users how best-in-practice code is written in
      Svelte. You’ll learn how to import third-party libraries, external scripts
      as well as how to handle common problems that you will have to solve
      often.
    </p>
  </div>
  <div class="navigation-block my-1">
    <div class="navigation-content">
      <h3>Pick a Category to Get Started</h3>
      <div class="categories-wrap">
        {#each categories as category}
          <div class="category-style">
            <div>
              <img src={category.meta.frontmatter.icon} alt="" />
              <a
                href={category.parent.path}>{category.meta.frontmatter.title}</a>
            </div>
            <CategoryTree nodes={category.parent.children} />
          </div>
        {/each}
      </div>
    </div>
  </div>
  <div class="my-1">
    <h3>What can I expect from these recipes?</h3>
    <p>
      The Svelte compiler expects all components it receives to be valid Svelte
      syntax. To use compile-to-js or compile-to-css languages, you need to make
      sure that any non-standard syntax is transformed before Svelte tries to
      parse it. To enable this Svelte provides a preprocess method allowing you
      to transform different parts of the component before it reaches the
      compiler. With <b>svelte.preprocess</b> you have a great deal of flexibility
      in how you write your components while ensuring that the Svelte compiler receives
      a plain component.
    </p>
  </div>
  <div class="signup-block my-1">
    <h3>Do you want to write a recipe?</h3>
    <p>
      We’re looking for new recipes and recipe authors. Are you interested? Sign
      up below!
    </p>
    <button>Sign up</button>
  </div>
  <div class="my-1">
    <h3>Where to get started</h3>
    <p>
      If you want the quickest way to get started, clone <a
        href="https://github.com/sveltejs/template">the Official Svelte App
        template</a>. If you want a custom setup, head to the <a
        href="/recipes/build-setup">Build Setup recipes</a>.
    </p>
    <p>
      If you are writing a Svelte component library, check the <a
        href="https://github.com/sveltejs/component-template">the Official
        Svelte Component template</a>.
    </p>
  </div>
</div>
